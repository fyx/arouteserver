
router id 192.0.2.2;
define rs_as = 999;

log "/var/log/bird.log" all;
log syslog all;
debug protocols { states, routes, filters, interfaces, events };

timeformat base         iso long;
timeformat log          iso long;
timeformat protocol     iso long;
timeformat route        iso long;

protocol device {};

ipv6 table master6 sorted;


include "/etc/bird/header.local";



# ---------------------------------------------------------
# RPKI

roa4 table RPKI4;
roa6 table RPKI6;
include "/etc/bird/rpki_rtr_config.local";




# ---------------------------------------------------------
# IRRDB

# AS10745, used_by client AS10745_2
define AS_SET_AS10745_asns = [
	10745
];

define AS_SET_AS10745_prefixes_6 = [
	2001:500:4::/48, 	2001:500:110::/48
];





# ---------------------------------------------------------
# COMMON


# This function returns True if 'net' is a bogon prefix
# or falls within a bogon prefix.
function prefix_is_bogon() -> bool
prefix set bogons_6;
{
	bogons_6 = [
		# Default route
		::/0,

		# loopback, unspecified, v4-mapped
		::/8{8,128},

		# RFC 6052 - IPv4-IPv6 Translation
		64:ff9b::/96{96,128},

		# RFC 6666 - reserved for Discard-Only Address Block
		100::/8{8,128},

		# RFC 4048 - Reserved by IETF
		200::/7{7,128},

		# RFC 4291 - Reserved by IETF
		400::/6{6,128},

		# RFC 4291 - Reserved by IETF
		800::/5{5,128},

		# RFC 4291 - Reserved by IETF
		1000::/4{4,128},

		# RFC 4380 - Teredo prefix
		2001::/33{33,128},

		# RFC 4380 - Teredo prefix
		2001:0:8000::/33{33,128},

		# RFC 5180 - Benchmarking
		2001:2::/48{48,128},

		# RFC 7450 - Automatic Multicast Tunneling
		2001:3::/32{32,128},

		# RFC 4843 - Deprecated ORCHID
		2001:10::/28{28,128},

		# RFC 7343 - ORCHIDv2
		2001:20::/28{28,128},

		# RFC 3849 - NON-ROUTABLE range to be used for documentation purpose
		2001:db8::/32{32,128},

		# RFC 3068 - 6to4 prefix
		2002::/16{16,128},

		# RFC 5156 - used for the 6bone but was returned
		3ffe::/16{16,128},

		# RFC 4291 - Reserved by IETF
		4000::/3{3,128},

		# RFC 5156 - used for the 6bone but was returned
		5f00::/8{8,128},

		# RFC 4291 - Reserved by IETF
		6000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		8000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		a000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		c000::/3{3,128},

		# RFC 4291 - Reserved by IETF
		e000::/4{4,128},

		# RFC 4291 - Reserved by IETF
		f000::/5{5,128},

		# RFC 4291 - Reserved by IETF
		f800::/6{6,128},

		# RFC 4193 - Unique Local Unicast
		fc00::/7{7,128},

		# RFC 4291 - Link Local Unicast
		fe80::/10{10,128},

		# RFC 4291 - Reserved by IETF
		fec0::/10{10,128},

		# RFC 4291 - Multicast
		ff00::/8{8,128}
	];

	if net.type = NET_IP6 then
		if net ~ bogons_6 then return true;
	return false;
}

# This function returns True if 'net' falls within a
# prefix contained in the global blacklist (for example,
# local networks)
function prefix_is_in_global_blacklist() -> bool
prefix set global_blacklist_6;
{
	global_blacklist_6 = [
		# Local network
		2001:db8:1:1::/64{64,128}
	];

	if net.type = NET_IP6 then
		if net ~ global_blacklist_6 then return true;

	return false;
}

# This function returns True if the length of 'net' prefix
# falls within the range 'min'-'max' (included).
function prefix_len_is_valid (int pref_len_min; int pref_len_max) -> bool {
	if net.len < pref_len_min then return false;
	if net.len > pref_len_max then return false;
	return true;
}

# This function returns True if the AS_PATH contains one or
# more private/reserved ASN.
function as_path_contains_invalid_asn() -> bool
int set invalid_asns;
{
	# http://www.iana.org/assignments/as-numbers/as-numbers.xhtml
	invalid_asns = [
		# 16-bit
		0,			# Reserved. RFC7607
		23456,			# AS_TRANS. RFC6793
		64496..64511,		# Reserved for use in documentation and sample code. RFC5398
		64512..65534,		# Reserved for Private Use. RFC6996
		65535,			# Reserved. RFC7300

		# 32-bit
		65536..65551,		# Reserved for use in documentation and sample code. RFC5398
		65552..131071,		# Reserved.
		4200000000..4294967294, # Reserved for Private Use. [RFC6996]
		4294967295		# Reserved. RFC7300
	];
	return bgp_path ~ invalid_asns;
}


# This function scrubs BGP communities used by the route server
# for signaling purpose toward its clients. (RFC7454, Section 11)
# It must be applied on routes entering the route server.
function scrub_communities_in()
{
	# origin_not_present_in_as_set
	bgp_community.delete([(65530, 0)]);
	bgp_large_community.delete([(999, 65530, 0)]);

	# origin_present_in_as_set
	bgp_community.delete([(65530, 1)]);
	bgp_large_community.delete([(999, 65530, 1)]);

	hook_scrub_communities_in();
}

# This function scrubs BGP communities used by clients to instruct
# the route server to perform some actions.
# It must be applied on routes leaving the route server.
function scrub_communities_out()
{
	# add_noadvertise_to_any
	bgp_community.delete([(65508, 999)]);
	bgp_large_community.delete([(999, 65508, 999)]);
	bgp_ext_community.delete([(rt, 65508, 999)]);

	# add_noadvertise_to_peer
	bgp_community.delete([(65510, 1..64511)]);
	bgp_large_community.delete([(999, 65510, 1..64511)]);
	bgp_large_community.delete([(999, 65510, 131072..4199999999)]);
	bgp_ext_community.delete([(rt, 65510, 1..64511)]);
	bgp_ext_community.delete([(rt, 65510, 131072..4199999999)]);

	# add_noexport_to_any
	bgp_community.delete([(65507, 999)]);
	bgp_large_community.delete([(999, 65507, 999)]);
	bgp_ext_community.delete([(rt, 65507, 999)]);

	# add_noexport_to_peer
	bgp_community.delete([(65509, 1..64511)]);
	bgp_large_community.delete([(999, 65509, 1..64511)]);
	bgp_large_community.delete([(999, 65509, 131072..4199999999)]);
	bgp_ext_community.delete([(rt, 65509, 1..64511)]);
	bgp_ext_community.delete([(rt, 65509, 131072..4199999999)]);

	# announce_to_peer
	bgp_community.delete([(999, 1..64511)]);
	bgp_large_community.delete([(999, 999, 1..64511)]);
	bgp_large_community.delete([(999, 999, 131072..4199999999)]);
	bgp_ext_community.delete([(rt, 999, 1..64511)]);
	bgp_ext_community.delete([(rt, 999, 131072..4199999999)]);

	# blackholing
	bgp_community.delete([(65534, 0)]);
	bgp_large_community.delete([(999, 666, 0)]);

	# do_not_announce_to_any
	bgp_community.delete([(0, 999)]);
	bgp_large_community.delete([(999, 0, 999)]);
	bgp_ext_community.delete([(rt, 0, 999)]);

	# do_not_announce_to_peer
	bgp_community.delete([(0, 1..64511)]);
	bgp_large_community.delete([(999, 0, 1..64511)]);
	bgp_large_community.delete([(999, 0, 131072..4199999999)]);
	bgp_ext_community.delete([(rt, 0, 1..64511)]);
	bgp_ext_community.delete([(rt, 0, 131072..4199999999)]);

	# prepend_once_to_any
	bgp_community.delete([(65501, 999)]);
	bgp_large_community.delete([(999, 65501, 999)]);
	bgp_ext_community.delete([(rt, 65501, 999)]);

	# prepend_once_to_peer
	bgp_community.delete([(65504, 1..64511)]);
	bgp_large_community.delete([(999, 65504, 1..64511)]);
	bgp_large_community.delete([(999, 65504, 131072..4199999999)]);
	bgp_ext_community.delete([(rt, 65504, 1..64511)]);
	bgp_ext_community.delete([(rt, 65504, 131072..4199999999)]);

	# prepend_thrice_to_any
	bgp_community.delete([(65503, 999)]);
	bgp_large_community.delete([(999, 65503, 999)]);
	bgp_ext_community.delete([(rt, 65503, 999)]);

	# prepend_thrice_to_peer
	bgp_community.delete([(65506, 1..64511)]);
	bgp_large_community.delete([(999, 65506, 1..64511)]);
	bgp_large_community.delete([(999, 65506, 131072..4199999999)]);
	bgp_ext_community.delete([(rt, 65506, 1..64511)]);
	bgp_ext_community.delete([(rt, 65506, 131072..4199999999)]);

	# prepend_twice_to_any
	bgp_community.delete([(65502, 999)]);
	bgp_large_community.delete([(999, 65502, 999)]);
	bgp_ext_community.delete([(rt, 65502, 999)]);

	# prepend_twice_to_peer
	bgp_community.delete([(65505, 1..64511)]);
	bgp_large_community.delete([(999, 65505, 1..64511)]);
	bgp_large_community.delete([(999, 65505, 131072..4199999999)]);
	bgp_ext_community.delete([(rt, 65505, 1..64511)]);
	bgp_ext_community.delete([(rt, 65505, 131072..4199999999)]);

	hook_scrub_communities_out();
}

# This function verifies if the route is tagged with one of
# the blackhole filtering communities.
function is_blackhole_filtering_request() -> bool
{
	if net.type = NET_IP6 then {
	if (65535, 666) ~ bgp_community then
		return true;

	if (65534, 0) ~ bgp_community then
		return true;
	if (999, 666, 0) ~ bgp_large_community then
		return true;

	}
	return false;
}

# This function must be applied to outgoing routes.
# It applies the blackhole filtering policy to the current route.
function apply_blackhole_filtering_policy() {
	if net.type = NET_IP6 then {

	# Configured policy: rewrite-next-hop
	bgp_community.add((65535, 666));
	bgp_next_hop = 2001:db8:1:1::66;
	# NO_EXPORT
	bgp_community.add((65535, 65281));

	}
	hook_apply_blackhole_filtering_policy(6);
}

# This function verifies if the current route can be announced to
# the given client on the basis of the attached control BGP
# communities.
function route_can_be_announced_to(int peer_as; ip client_ip; string client_id) -> bool
int client_rtt;
{
	return hook_route_can_be_announced_to(peer_as, client_ip, client_id);
}

# This function prepends the left-most ASN <times> times.
function do_prepend(int times) {
	case times {
		1: bgp_path.prepend(bgp_path.first);
		2: bgp_path.prepend(bgp_path.first); bgp_path.prepend(bgp_path.first);
		3: bgp_path.prepend(bgp_path.first); bgp_path.prepend(bgp_path.first); bgp_path.prepend(bgp_path.first);
	}
}

# This function verifies if the current route matches one of the
# control communities in charge of prepending client's ASN.
function apply_prepend(int peer_as; ip client_ip) -> bool
int client_rtt;
{
	# prepend_once_to_peer
	if peer_as <= 65535 then {
		if (65504, peer_as) ~ bgp_community then
			{ do_prepend(1); return true; }
	}
	if (999, 65504, peer_as) ~ bgp_large_community then
		{ do_prepend(1); return true; }
	if (rt, 65504, peer_as) ~ bgp_ext_community then
		{ do_prepend(1); return true; }

	# prepend_twice_to_peer
	if peer_as <= 65535 then {
		if (65505, peer_as) ~ bgp_community then
			{ do_prepend(2); return true; }
	}
	if (999, 65505, peer_as) ~ bgp_large_community then
		{ do_prepend(2); return true; }
	if (rt, 65505, peer_as) ~ bgp_ext_community then
		{ do_prepend(2); return true; }

	# prepend_thrice_to_peer
	if peer_as <= 65535 then {
		if (65506, peer_as) ~ bgp_community then
			{ do_prepend(3); return true; }
	}
	if (999, 65506, peer_as) ~ bgp_large_community then
		{ do_prepend(3); return true; }
	if (rt, 65506, peer_as) ~ bgp_ext_community then
		{ do_prepend(3); return true; }



	# prepend_once_to_any
	if (65501, 999) ~ bgp_community then
		{ do_prepend(1); return true; }
	if (999, 65501, 999) ~ bgp_large_community then
		{ do_prepend(1); return true; }
	if (rt, 65501, 999) ~ bgp_ext_community then
		{ do_prepend(1); return true; }

	# prepend_twice_to_any
	if (65502, 999) ~ bgp_community then
		{ do_prepend(2); return true; }
	if (999, 65502, 999) ~ bgp_large_community then
		{ do_prepend(2); return true; }
	if (rt, 65502, 999) ~ bgp_ext_community then
		{ do_prepend(2); return true; }

	# prepend_thrice_to_any
	if (65503, 999) ~ bgp_community then
		{ do_prepend(3); return true; }
	if (999, 65503, 999) ~ bgp_large_community then
		{ do_prepend(3); return true; }
	if (rt, 65503, 999) ~ bgp_ext_community then
		{ do_prepend(3); return true; }


	return true;
}

# This function adds the BGP communities used to
# keep track of RPKI validation state.
# RFC8097 extended communities are used here.
function add_rpki_community(string comm_name) {
	# RFC8097 BGP communities
	if comm_name = "valid" then {
		bgp_ext_community.add((unknown 0x4300, 0, 0));
	}
	if comm_name = "unknown" then {
		bgp_ext_community.add((unknown 0x4300, 0, 1));
	}
	if comm_name = "invalid" then {
		bgp_ext_community.add((unknown 0x4300, 0, 2));
	}

}

# This functions performs RPKI validation of the current
# route and adds the informative communities.
function perform_rpki_validation () {
	if net.type = NET_IP4 then {
		case roa_check(RPKI4) {
			ROA_VALID: add_rpki_community("valid");
			ROA_UNKNOWN: add_rpki_community("unknown");
			ROA_INVALID: add_rpki_community("invalid");
		}
	} else {
		case roa_check(RPKI6) {
			ROA_VALID: add_rpki_community("valid");
			ROA_UNKNOWN: add_rpki_community("unknown");
			ROA_INVALID: add_rpki_community("invalid");
		}
	}
}

# This function returns True if the route is INVALID.
function route_is_rpki_invalid () -> bool {
	return (unknown 0x4300, 0, 2) ~ bgp_ext_community;
}

# This function returns True if RPKI INVALID routes
# should be announced to clients.
function announce_rpki_invalid_to_client(int client_asn; ip client_ip; string client_id) -> bool {
	return hook_announce_rpki_invalid_to_client(client_asn, client_ip, client_id);
}

# This function adds NO_EXPORT and/or NO_ADVERTISE
# well-known communities.
function add_noexport_noadvertise(int peer_as)
{
	# add_noexport_to_any
	
	if (65507, 999) ~ bgp_community then
		{ bgp_community.add((65535, 65281)); }
	if (999, 65507, 999) ~ bgp_large_community then
		{ bgp_community.add((65535, 65281)); }
	if (rt, 65507, 999) ~ bgp_ext_community then
		{ bgp_community.add((65535, 65281)); }

	# add_noadvertise_to_any
	
	if (65508, 999) ~ bgp_community then
		{ bgp_community.add((65535, 65282)); }
	if (999, 65508, 999) ~ bgp_large_community then
		{ bgp_community.add((65535, 65282)); }
	if (rt, 65508, 999) ~ bgp_ext_community then
		{ bgp_community.add((65535, 65282)); }

	# add_noexport_to_peer
	
	if peer_as <= 65535 then {
		if (65509, peer_as) ~ bgp_community then
			{ bgp_community.add((65535, 65281)); }
	}
	if (999, 65509, peer_as) ~ bgp_large_community then
		{ bgp_community.add((65535, 65281)); }
	if (rt, 65509, peer_as) ~ bgp_ext_community then
		{ bgp_community.add((65535, 65281)); }

	# add_noadvertise_to_peer
	
	if peer_as <= 65535 then {
		if (65510, peer_as) ~ bgp_community then
			{ bgp_community.add((65535, 65282)); }
	}
	if (999, 65510, peer_as) ~ bgp_large_community then
		{ bgp_community.add((65535, 65282)); }
	if (rt, 65510, peer_as) ~ bgp_ext_community then
		{ bgp_community.add((65535, 65282)); }

}








# ---------------------------------------------------------
# MEMBERS


# AS-SET for AS10745_2
function origin_as_is_in_AS10745_2_as_set() -> bool {
	if bgp_path.last ~ AS_SET_AS10745_asns then
		return true;
	return false;
}

# R-SET for AS10745_2
function prefix_is_in_AS10745_2_as_set() -> bool {
    if net.type = NET_IP6 then
        if net ~ AS_SET_AS10745_prefixes_6 then
            return true;
    return false;
}

function next_hop_is_valid_for_AS10745_2() -> bool
{
	# Checks if NEXT_HOP is one of those allowed for routes announced by AS10745_2
	if bgp_next_hop = 2001:db:1:1::22 then return true;	# AS10745_2
	return false;
}


function verify_AS10745_2_irrdb()
bool origin_ok;
bool prefix_ok;
bool validated;
{
	origin_ok = false;
	prefix_ok = false;
	validated = false;

	origin_ok = origin_as_is_in_AS10745_2_as_set();
	prefix_ok = prefix_is_in_AS10745_2_as_set();

	if !origin_ok then {
		bgp_community.add((65530, 0));
		bgp_large_community.add((999, 65530, 0));

	}
	if origin_ok then {
		bgp_community.add((65530, 1));
		bgp_large_community.add((999, 65530, 1));

	}





	if !validated && !origin_ok then {
		reject "origin ASN [", bgp_path.last, "] not in allowed as-sets - REJECTING ", net;

	}
	if !validated && !prefix_ok then {
		reject "prefix not in client's r_set - REJECTING ", net;

	}
}

filter receive_from_AS10745_2 {
	if !(source = RTS_BGP ) then
		reject "source != RTS_BGP - REJECTING ", net;


	if !(net.type = NET_IP6) then
		reject "AFI not enabled for this peer - REJECTING ", net;


	if !hook_pre_receive_from_client(10745, 2001:db:1:1::22, "AS10745_2") then
		reject "hook_pre_receive_from_client returned false - REJECTING ", net;


	scrub_communities_in();


	# NEXT_HOP
	if !next_hop_is_valid_for_AS10745_2() then
		reject "NEXT_HOP [", bgp_next_hop, "] not allowed - REJECTING ", net;


	# AS_PATH: length
	if bgp_path.len > 32 then
		reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;


	# AS_PATH: left-most ASN
	if bgp_path.first != 10745 then
		reject "invalid left-most ASN [", bgp_path.first, "] - REJECTING ", net;


	# AS_PATH: invalid ASNs
	if as_path_contains_invalid_asn() then
		reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;


	# AS_PATH: transit-free ASNs
	if bgp_path ~ [174, 701, 1299, 2914, 3257, 3320, 3356, 5511, 6453, 6461, 6762, 6830, 7018, 12956] then
		reject "AS_PATH [", bgp_path ,"] contains transit-free ASN - REJECTING ", net;


	# AS_PATH: never via route-servers ASNs
	if bgp_path ~ [46, 92, 174, 278, 680, 714, 1257, 1273, 1299, 1734, 1955, 2119, 2152, 2527, 2603, 2698, 2914, 3257, 3265, 3292, 3320, 3454, 3491, 3630, 3754, 5391, 5432, 5511, 6079, 6405, 6730, 6805, 6830, 6908, 7843, 8075, 8365, 8455, 8607, 8943, 8989, 9908, 9928, 10000, 10013, 11164, 11260, 11290, 11670, 12353, 12389, 12491, 12822, 12926, 13030, 13032, 13631, 14295, 14430, 15305, 15692, 16509, 17012, 17390, 18520, 18914, 20115, 20161, 21396, 21647, 23888, 23961, 24115, 24282, 24800, 25215, 26068, 27947, 28398, 29169, 29695, 30600, 30781, 30967, 30983, 31764, 32598, 32840, 33983, 34108, 34209, 34587, 35836, 35900, 36165, 36459, 36914, 37271, 37529, 38145, 38623, 38713, 39326, 39651, 40063, 42083, 43470, 46450, 46887, 47377, 47584, 48237, 48265, 48408, 49127, 49695, 50576, 50670, 50919, 51530, 51630, 52662, 52990, 53859, 54295, 54574, 56028, 57142, 57433, 57866, 58401, 58768, 59282, 60412, 60449, 60757, 61368, 61525, 62164, 62350, 62467, 62567, 62623, 63126, 63290, 63739, 131398, 131996, 132563, 132829, 132996, 133647, 134022, 135706, 135848, 136106, 136874, 137207, 137610, 138023, 138228, 138368, 138769, 138953, 139667, 140287, 141134, 141411, 141856, 141892, 142164, 142369, 146846, 146958, 149251, 149391, 149587, 149663, 149826, 150242, 151403, 151538, 151633, 151765, 152300, 198250, 199737, 199956, 200558, 201978, 202256, 202351, 202561, 202793, 204482, 206003, 206275, 207195, 207484, 208425, 208753, 209165, 209310, 209810, 210030, 212285, 212512, 212686, 212706, 213202, 215436, 215617, 216047, 216265, 262191, 263127, 263258, 263686, 265630, 266917, 267214, 267561, 267823, 269367, 269906, 270544, 271053, 271172, 272018, 272097, 272124, 273101, 273608, 327732, 328959, 329210, 329253, 393573, 393684, 393731, 394837, 396304, 396477, 397736, 398203, 398296, 398427] then
	reject "AS_PATH [", bgp_path ,"] contains never via route-servers ASN - REJECTING ", net;


	# Prefix: only IPv6 Global Unicast space allowed
	if net.type = NET_IP6 && !(net ~ [2000::/3+]) then
		reject "prefix is not in IPv6 Global Unicast space - REJECTING ", net;


	# Prefix: global blacklist
	if prefix_is_in_global_blacklist() then
		reject "prefix is in global blacklist - REJECTING ", net;



	# Prefix: bogon
	if prefix_is_bogon() then
		reject "prefix is bogon - REJECTING ", net;


	# IRRdb checks
	verify_AS10745_2_irrdb();

	# Blackhole request?
	if is_blackhole_filtering_request() then {
		accept "blackhole filtering request from AS10745_2 - ACCEPTING ", net;
	} else {
		perform_rpki_validation();

		if route_is_rpki_invalid() then
			reject "RPKI, route is INVALID - REJECTING ", net;


		# Prefix: length
		if !prefix_len_is_valid(12, 48) then
			reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;


	}

	if !hook_post_receive_from_client(10745, 2001:db:1:1::22, "AS10745_2") then
		reject "hook_post_receive_from_client returned false - REJECTING ", net;


	accept;
}

filter announce_to_AS10745_2
{
	if !hook_pre_announce_to_client(10745, 2001:db:1:1::22, "AS10745_2") then
		reject "hook_pre_announce_to_client returned false - NOT ANNOUNCING ", net, " TO AS10745_2";


	# Blackhole request?
	if is_blackhole_filtering_request() then {
		apply_blackhole_filtering_policy();
	} else {
		# RPKI: do not announce INVALID to clients
		if route_is_rpki_invalid() then {
			if !announce_rpki_invalid_to_client(10745, 2001:db:1:1::22, "AS10745_2") then
				reject "route is INVALID - NOT ANNOUNCING ", net, " TO AS10745_2";
		}
	}

	# BGP control communities
	if !route_can_be_announced_to(10745, 2001:db:1:1::22, "AS10745_2") then
		reject "route didn't pass control communities checks - NOT ANNOUNCING ", net, " TO AS10745_2";

	apply_prepend(10745, 2001:db:1:1::22);


	add_noexport_noadvertise(10745);

	scrub_communities_out();


	if !hook_post_announce_to_client(10745, 2001:db:1:1::22, "AS10745_2") then
		reject "hook_post_announce_to_client returned false - NOT ANNOUNCING ", net, " TO AS10745_2";

	accept;
}

protocol bgp AS10745_2 {

	local as 999;
	neighbor 2001:db:1:1::22 as 10745;
	rs client;


	passive on;
	ttl security on;

	interpret communities off;

	# ---------------------------------------
	ipv6 {
	table master6;

	add paths tx;

	secondary;

	receive limit 13915 action restart;


	import table on;

	import keep filtered on;

	import filter receive_from_AS10745_2;
	export filter announce_to_AS10745_2;
	# ---------------------------------------
	};

		}



